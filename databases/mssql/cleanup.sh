#!/bin/bash
# SQL Server - Script de limpieza y mantenimiento
cd "$(dirname "$0")"
CONTAINER_NAME="sqlserver_container"
SERVICE_NAME="SQL Server"

# Colores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üßπ Limpieza de $SERVICE_NAME${NC}"
echo "========================================"

# Funci√≥n para confirmar acciones peligrosas
confirm() {
    read -p "¬øEst√°s seguro? (y/N): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

echo -e "${YELLOW}Opciones de limpieza:${NC}"
echo "1. üóÇÔ∏è  Limpiar logs del contenedor"
echo "2. üê≥ Reiniciar contenedor"
echo "3. üíø Eliminar vol√∫menes (PELIGROSO: elimina datos)"
echo "4. üóëÔ∏è  Eliminar todo (contenedores + vol√∫menes + im√°genes)"
echo "5. üìä Solo mostrar informaci√≥n de uso de espacio"
echo ""

read -p "Selecciona una opci√≥n (1-5): " choice

case $choice in
    1)
        echo -e "${BLUE}üóÇÔ∏è  Limpiando logs del contenedor...${NC}"
        if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            docker logs --details $CONTAINER_NAME 2>/dev/null | wc -l | xargs echo "L√≠neas de log actuales:"
            sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $CONTAINER_NAME 2>/dev/null) 2>/dev/null
            echo -e "${GREEN}‚úÖ Logs limpiados${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Contenedor no encontrado${NC}"
        fi
        ;;
    2)
        echo -e "${BLUE}üê≥ Reiniciando contenedor...${NC}"
        if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
            docker restart $CONTAINER_NAME
            echo -e "${GREEN}‚úÖ Contenedor reiniciado${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Contenedor no est√° corriendo${NC}"
        fi
        ;;
    3)
        echo -e "${RED}‚ö†Ô∏è  PELIGRO: Esto eliminar√° todos los datos de la base de datos${NC}"
        if confirm; then
            echo -e "${BLUE}üõë Deteniendo servicios...${NC}"
            docker-compose down
            echo -e "${BLUE}üíø Eliminando vol√∫menes...${NC}"
            docker volume ls | grep mssql | awk '{print $2}' | xargs -r docker volume rm
            echo -e "${GREEN}‚úÖ Vol√∫menes eliminados${NC}"
        else
            echo -e "${YELLOW}‚ùå Operaci√≥n cancelada${NC}"
        fi
        ;;
    4)
        echo -e "${RED}‚ö†Ô∏è  PELIGRO: Esto eliminar√° TODO (contenedores, vol√∫menes, im√°genes)${NC}"
        if confirm; then
            echo -e "${BLUE}üõë Deteniendo y eliminando contenedores...${NC}"
            docker-compose down --rmi all --volumes --remove-orphans
            echo -e "${BLUE}üóëÔ∏è  Limpiando im√°genes no utilizadas...${NC}"
            docker image prune -f
            echo -e "${GREEN}‚úÖ Limpieza completa realizada${NC}"
        else
            echo -e "${YELLOW}‚ùå Operaci√≥n cancelada${NC}"
        fi
        ;;
    5)
        echo -e "${BLUE}üìä Informaci√≥n de uso de espacio:${NC}"
        echo ""
        echo -e "${BLUE}Contenedores:${NC}"
        docker ps -a --filter name=$CONTAINER_NAME --format "table {{.Names}}\t{{.Status}}\t{{.Size}}"
        echo ""
        echo -e "${BLUE}Vol√∫menes:${NC}"
        docker volume ls | grep mssql
        echo ""
        echo -e "${BLUE}Im√°genes:${NC}"
        docker images | grep mssql
        echo ""
        echo -e "${BLUE}Uso total de Docker:${NC}"
        docker system df
        ;;
    *)
        echo -e "${RED}‚ùå Opci√≥n inv√°lida${NC}"
        exit 1
        ;;
esac